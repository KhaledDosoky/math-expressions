# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,153,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,
        10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,86,
        8,12,1,13,1,13,5,13,90,8,13,10,13,12,13,93,9,13,1,14,4,14,96,8,14,
        11,14,12,14,97,1,14,1,14,4,14,102,8,14,11,14,12,14,103,3,14,106,
        8,14,1,14,1,14,3,14,110,8,14,1,14,4,14,113,8,14,11,14,12,14,114,
        3,14,117,8,14,1,14,1,14,4,14,121,8,14,11,14,12,14,122,1,14,1,14,
        3,14,127,8,14,1,14,4,14,130,8,14,11,14,12,14,131,3,14,134,8,14,3,
        14,136,8,14,1,15,1,15,5,15,140,8,15,10,15,12,15,143,9,15,1,15,1,
        15,1,16,4,16,148,8,16,11,16,12,16,149,1,16,1,16,0,0,17,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,1,0,9,2,0,43,43,45,45,3,0,37,37,42,42,47,47,2,0,60,60,
        62,62,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
        57,2,0,69,69,101,101,2,0,10,10,13,13,3,0,9,10,13,13,32,32,170,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,1,
        0,0,0,9,46,1,0,0,0,11,53,1,0,0,0,13,59,1,0,0,0,15,62,1,0,0,0,17,
        66,1,0,0,0,19,70,1,0,0,0,21,72,1,0,0,0,23,74,1,0,0,0,25,85,1,0,0,
        0,27,87,1,0,0,0,29,135,1,0,0,0,31,137,1,0,0,0,33,147,1,0,0,0,35,
        36,5,61,0,0,36,2,1,0,0,0,37,38,5,40,0,0,38,4,1,0,0,0,39,40,5,41,
        0,0,40,6,1,0,0,0,41,42,5,120,0,0,42,43,5,49,0,0,43,44,5,48,0,0,44,
        45,5,94,0,0,45,8,1,0,0,0,46,47,5,97,0,0,47,48,5,115,0,0,48,49,5,
        115,0,0,49,50,5,101,0,0,50,51,5,114,0,0,51,52,5,116,0,0,52,10,1,
        0,0,0,53,54,5,112,0,0,54,55,5,114,0,0,55,56,5,105,0,0,56,57,5,110,
        0,0,57,58,5,116,0,0,58,12,1,0,0,0,59,60,5,111,0,0,60,61,5,114,0,
        0,61,14,1,0,0,0,62,63,5,97,0,0,63,64,5,110,0,0,64,65,5,100,0,0,65,
        16,1,0,0,0,66,67,5,110,0,0,67,68,5,111,0,0,68,69,5,116,0,0,69,18,
        1,0,0,0,70,71,5,94,0,0,71,20,1,0,0,0,72,73,7,0,0,0,73,22,1,0,0,0,
        74,75,7,1,0,0,75,24,1,0,0,0,76,77,5,61,0,0,77,86,5,61,0,0,78,79,
        5,33,0,0,79,86,5,61,0,0,80,81,5,60,0,0,81,86,5,61,0,0,82,83,5,62,
        0,0,83,86,5,61,0,0,84,86,7,2,0,0,85,76,1,0,0,0,85,78,1,0,0,0,85,
        80,1,0,0,0,85,82,1,0,0,0,85,84,1,0,0,0,86,26,1,0,0,0,87,91,7,3,0,
        0,88,90,7,4,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,
        1,0,0,0,92,28,1,0,0,0,93,91,1,0,0,0,94,96,7,5,0,0,95,94,1,0,0,0,
        96,97,1,0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,105,1,0,0,0,99,101,
        5,46,0,0,100,102,7,5,0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,
        1,0,0,0,103,104,1,0,0,0,104,106,1,0,0,0,105,99,1,0,0,0,105,106,1,
        0,0,0,106,116,1,0,0,0,107,109,7,6,0,0,108,110,7,0,0,0,109,108,1,
        0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,111,113,7,5,0,0,112,111,1,
        0,0,0,113,114,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,117,1,
        0,0,0,116,107,1,0,0,0,116,117,1,0,0,0,117,136,1,0,0,0,118,120,5,
        46,0,0,119,121,7,5,0,0,120,119,1,0,0,0,121,122,1,0,0,0,122,120,1,
        0,0,0,122,123,1,0,0,0,123,133,1,0,0,0,124,126,7,6,0,0,125,127,7,
        0,0,0,126,125,1,0,0,0,126,127,1,0,0,0,127,129,1,0,0,0,128,130,7,
        5,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,
        0,0,0,132,134,1,0,0,0,133,124,1,0,0,0,133,134,1,0,0,0,134,136,1,
        0,0,0,135,95,1,0,0,0,135,118,1,0,0,0,136,30,1,0,0,0,137,141,5,35,
        0,0,138,140,8,7,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,
        0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,0,144,145,6,15,
        0,0,145,32,1,0,0,0,146,148,7,8,0,0,147,146,1,0,0,0,148,149,1,0,0,
        0,149,147,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,151,152,6,16,0,
        0,152,34,1,0,0,0,16,0,85,91,97,103,105,109,114,116,122,126,131,133,
        135,141,149,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    ASSERT = 5
    PRINT = 6
    OR = 7
    AND = 8
    NOT = 9
    POW = 10
    ADD_SUB = 11
    MUL_DIV = 12
    COMPARE = 13
    ID = 14
    NUMBER = 15
    COMMENT = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'x10^'", "'assert'", "'print'", "'or'", 
            "'and'", "'not'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "ASSERT", "PRINT", "OR", "AND", "NOT", "POW", "ADD_SUB", "MUL_DIV", 
            "COMPARE", "ID", "NUMBER", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "ASSERT", "PRINT", "OR", 
                  "AND", "NOT", "POW", "ADD_SUB", "MUL_DIV", "COMPARE", 
                  "ID", "NUMBER", "COMMENT", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


